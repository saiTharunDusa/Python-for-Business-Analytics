# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

sales_df = pd.read_csv('/content/Warehouse_and_Retail_Sales.csv')
print(sales_df.head())
print()
print('The descriptive statistics are ')
print(sales_df.describe())


"""
DLC Dispensaries:
The average number of cases sold at DLC dispensaries is 7.02, with the highest recorded sales reaching 2739 cases. There were instances where as few as -6.4 cases were recorded, indicating returns or unfulfilled sales.
Product Transferred to DLC Dispensaries:
On average, 6.9 cases of product are transferred to DLC dispensaries. The highest volume transferred at once was 1990 cases.
Product Sold to MC Licenses:
An average of 25.2 cases of product is sold to MC licenses. The highest volume sold to MC dispensaries reached 18317 cases.

"""
df = sales_df.dropna()
retail_sales_mean = df.groupby('MONTH')['RETAIL_SALES'].mean()

plt.figure(figsize=(12, 6))
plt.bar(retail_sales_mean.index, retail_sales_mean.values)

plt.xlabel('Mean Proportions of Retail Sales by Month.')
plt.ylabel('Retail Sales')
plt.title('Retail Sales distribution by Month')
plt.show()

"""1. The highest number of cases of product sold from DLC dispensaries occurs in December. This data makes sense because December is typically a peak month for sales, with liquor often being included in holiday gatherings and gift baskets.
2. Liquor sales might experience an even greater increase during July and August, especially when compared to general retail, as people tend to host more summer parties during this time.


"""

ware_house_sales_mean = df.groupby('MONTH')['WAREHOUSE_SALES'].mean()
plt.figure(figsize = (12, 6))
plt.bar(ware_house_sales_mean.index, ware_house_sales_mean.values)
plt.xlabel('Mean Proportions of Warehouse Sales by Month.')
plt.ylabel('Warehouse Sales')
plt.title('Warehourse Sales distribution by Month')

"""During the holiday season, it is common to see a significant increase in sales, particularly in November and December. This can be attributed to warehouses stocking up on liquor supplies in anticipation of the higher demand during this festive time. Retailers also expect a boost in liquor sales as people often purchase them as gifts or for gatherings. Additionally, there might be another surge in sales during the summer months, specifically in July or August. This could be because of the increased demand for liquors used in summer cocktails or parties, such as tequila and rum. Furthermore, purchases of liquors commonly consumed during barbecues, like whiskey and vodka, may also contribute to this rise in sales."""

retail_transfer_mean = df.groupby('MONTH')['RETAIL_TRANSFERS'].mean()
plt.figure(figsize = (12, 6))
plt.bar(retail_transfer_mean.index, retail_transfer_mean.values)
plt.xlabel('Mean Proportions of Retail Transfers by Month.')
plt.ylabel('Retail Transfers')
plt.title('Retail Transfers distribution by Month')

"""Monthly transfer fluctuations: The graph displays the quantity of liquor cases transferred to DLC dispensaries on a monthly basis. There appears to be some fluctuation in the transfer numbers throughout the year, but it's challenging to determine if there is a consistent seasonal pattern without additional data points.
It would be beneficial to have information about the time frame represented in this graph (e.g., one year, multiple years). A more extensive dataset could potentially unveil seasonal trends that are not evident in the current view.
"""

import statsmodels.formula.api as smf
# Fitting an ordinary least squares (OLS) regression model using statsmodels
print()
print('The regression model is ')
model = smf.ols(formula="RETAIL_SALES ~ MONTH + YEAR", data=df).fit()
print(model.summary())
intercept = model.params[0]
month_coefficient = model.params[1]
year_coefficient = model.params[2]
print(f"The intercept is {intercept}")
print(f"The month coefficient is {month_coefficient}")
print(f"The year coefficient is {year_coefficient}")
month = 9
year = 2020
predicted_retail_sales = intercept + month_coefficient * month + year_coefficient * year
print(f"The predicted retail sales for month {month} and year {year} is {predicted_retail_sales}")

"""Here are some key takeaways from the regression output:

Model Performance:
The R-squared value of 0.000 indicates that the chosen variables (MONTH and YEAR) do not adequately explain the variability in retail sales. The model does not account for any variance in the dependent variable (RETAIL_SALES) based on the independent variables.

Coefficients:
The intercept of -602.948 represents the estimated value of RETAIL_SALES when both MONTH and YEAR are zero. However, since MONTH and YEAR are time variables, directly interpreting this intercept may not be meaningful in this context.

The MONTH coefficient (0.1398) suggests that, on average, for each one-unit increase in the MONTH variable, RETAIL_SALES increases by 0.1398 units, holding other variables constant. This indicates a small positive relationship between the month and retail sales.

Similarly, the YEAR coefficient (0.3018) suggests that for each one-unit increase in the YEAR variable, RETAIL_SALES increases by 0.3018 units, holding other variables constant. This implies a larger positive relationship between the year and retail sales compared to the month.

Statistical Significance:
Both the MONTH and YEAR coefficients have p-values of 0.000, indicating that they are statistically significant predictors of RETAIL_SALES at conventional levels of significance (typically Î± = 0.05).

Prediction:
Based on the regression equation, the predicted value of RETAIL_SALES for September 2020 is 7.855. This prediction is obtained by plugging in the values of 9 for MONTH and 2020 for YEAR.

Model Limitations:
The low R-squared value suggests that the current model does not capture the variation in RETAIL_SALES well. This could be due to missing relevant variables, non-linear relationships, or other issues like multicollinearity (indicated by a large condition number).

Interpretation:
The statistical analysis shows that both time variables (MONTH and YEAR) have a significant impact on RETAIL_SALES. However, the model itself has limitations in explaining the variation in retail sales.
"""

from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split


year_list = df['YEAR'].tolist()
retail_sales_list = df['RETAIL_SALES'].tolist()

x = np.array(year_list).reshape(-1, 1)
y = np.array(retail_sales_list)

# Linear Regression
regressor = LinearRegression()
regressor.fit(x, y)
LR_predicted_value = regressor.predict([[2019]])
print(f"Predicted retail sales for year 2019 using linear regression: {LR_predicted_value[0]}")
print()

# Nearest neighbor
k = 15
knn_regressor = KNeighborsRegressor(n_neighbors=k)
knn_regressor.fit(x, y)
print(f'Predicted retail sales for year 2019 using K Nearest Neighbours: {knn_regressor.predict([[2019]])[0]}')
print()

# Decision Tree
# Taking max_depth is 3.
dt_regressor = DecisionTreeRegressor(max_depth = 3)
dt_regressor.fit(x, y)
print(f'Predicted retail sales for year 2019 using Decision Tree: {dt_regressor.predict([[2019]])[0]}')
print()

# Random Forest
rf_regressor = RandomForestRegressor()
rf_regressor.fit(x, y)
print(f'Predicted retail sales for year 2019 using Random Forest: {rf_regressor.predict([[2019]])[0]}')
print()

# # Neural Networks
# I got a warning about iterations, so that's why I have added the max_iter = 1000.
nn_regressor = MLPRegressor(max_iter=10000)
nn_regressor.fit(x, y)
print(f'Predicted retail sales for year 2019 using Neural Networks: {nn_regressor.predict([[2019]])[0]}')
print()

"""Predicted retail sales for year 2019 using linear regression: 7.062230408657172

Predicted retail sales for year 2019 using K Nearest Neighbours: 0.3093333333333333

Predicted retail sales for year 2019 using Decision Tree: 6.916168598691795

Predicted retail sales for year 2019 using Random Forest: 6.914890376623106

Predicted retail sales for year 2019 using Neural Networks: 7.935977072602437

In general, Neural Networks analysis is the best solution for it's complexity nature and it also processes more data than other analysis models. Therefore, Neural Networks is is best for this situation. But we could check that by train_test so that we could conclude which model is better for the given data set.

"""

training_x, testing_x, training_y, testing_y = train_test_split(x, y, random_state=42)
# Linear Regression
regressor = LinearRegression()
regressor.fit(training_x, training_y)
predicted = regressor.predict(testing_x)
predition_error = abs(predicted - testing_y)
print(f'Mean Absolute Error for Linear Regression: {np.mean(predition_error)}')

# Nearest Neighbour
k = 15
knn_regressor = KNeighborsRegressor(n_neighbors=k)
knn_regressor.fit(training_x, training_y)
predicted = knn_regressor.predict(testing_x)
predition_error = abs(predicted - testing_y)
print(f'Mean Absolute Error for K Nearest Neighbours: {np.mean(predition_error)}')

# Decision Tree
dt_regressor = DecisionTreeRegressor(max_depth = 3)
dt_regressor.fit(training_x, training_y)
predicted = dt_regressor.predict(testing_x)
prediction_error = abs(predicted - testing_y)
print(f'Mean Absolute Error for Decision Tree: {np.mean(prediction_error)}')

# Neural Networks
nn_regressor = MLPRegressor(max_iter=10000)
nn_regressor.fit(training_x, training_y)
predicted = nn_regressor.predict(testing_x)
prediction_error = abs(predicted - testing_y)
print(f'Mean Absolute Error for Neural Networks: {np.mean(prediction_error)}')

"""After evaluating various machine learning models such as Linear Regression, K Nearest Neighbors, Decision Tree, Random Forest, and Neural Networks, the selection of the best model depends on specific evaluation metrics and considerations. K Nearest Neighbors (KNN) stands out with the lowest Mean Absolute Error (MAE) of around 8.99, indicating its superior accuracy in predicting retail sales compared to the other models. However, the extremely low predicted value for KNN (0.31) raises concerns about its effectiveness on this dataset. On the other hand, Neural Networks also demonstrate competitive performance with a Mean Absolute Error of approximately 9.16 and the highest predicted value (7.94), showcasing their ability to capture complex patterns in the data. In contrast, Linear Regression, Decision Tree, and Random Forest, while satisfactory, have higher prediction errors compared to Neural Networks. Overall, Neural Networks emerge as the most promising model for this dataset due to their lower Mean Absolute Error and capability to handle intricate data relationships."""