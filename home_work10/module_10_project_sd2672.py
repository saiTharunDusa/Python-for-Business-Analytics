# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split

# reading the given data set.
hotel_review_df = pd.read_csv('/content/lv_hotel_reviews.csv', sep = ';')
print(hotel_review_df.head())
print()
print('The descriptive statistics of the given data is : ')
print(hotel_review_df.describe())
print()

"""1. The average for num_reviews is approx 48. This indicates that there are 48 reviews per user. And The average for helpful_votes is approx 32. This indicates that there are 32 helpful votes for each review.
2. The minimum number of reviews were 1 given by a user and maximum were 775. So the range for num_reviews is (1, 775).
3. The minimum number of helpful votes were 0 for a review and maximum were 365. So the range for helpful_votes is (0, 365).
"""

# Save all the num_reviews and helpful_votes to two separate lists.
num_reviews_list = hotel_review_df['num_reviews'].tolist()
helpful_votes = hotel_review_df['helpful_votes'].tolist()

x = np.array(num_reviews_list).reshape(-1, 1)
y = np.array(helpful_votes)

# Linear Regression
regressor = LinearRegression()
regressor.fit(x, y)
new_num_reviews = np.array(300)
LR_predicted_value = regressor.predict(new_num_reviews)
print(f'predicted number of helpful_votes based on a user who has posted 300 reviews using linear regression: {LR_predicted_value[0]}')
print()

# Nearest neighbor
# Given that k = 15.
k = 15
new_num_reviews = np.array(300).reshape(-1, 1)
knn_regressor = KNeighborsRegressor(n_neighbors=k)
knn_regressor.fit(x, y)
print(f'predicted number of helpful_votes based on a user who has posted 300 reviews using Nearest neighbor: {knn_regressor.predict(new_num_reviews)[0]}')
print()

# Decision Tree
# Given that max_depth is 3.
dt_regressor = DecisionTreeRegressor(max_depth = 3)
new_num_reviews = np.array(300).reshape(-1, 1)
dt_regressor.fit(x, y)
print(f'predicted number of helpful_votes based on a user who has posted 300 reviews using Decision Tree: {dt_regressor.predict(new_num_reviews)[0]}')
print()

# Random Forest
rf_regressor = RandomForestRegressor()
new_num_reviews = np.array(300).reshape(-1, 1)
rf_regressor.fit(x, y)
print(f'predicted number of helpful_votes based on a user who has posted 300 reviews using Random Forest: {rf_regressor.predict(new_num_reviews)[0]}')
print()

# Neural Networks
# I got a warning about iterations, so that's why I have added the max_iter = 1000.
nn_regressor = MLPRegressor(max_iter=1000)
new_num_reviews = np.array(300).reshape(-1, 1)
nn_regressor.fit(x, y)
print(f'predicted number of helpful_votes based on a user who has posted 300 reviews using Neural Networks: {nn_regressor.predict(new_num_reviews)[0]}')

"""predicted number of helpful_votes based on a user who has posted 300 reviews using linear regression: 160.5981348301889

predicted number of helpful_votes based on a user who has posted 300 reviews using Nearest neighbor: 185.53333333333333

predicted number of helpful_votes based on a user who has posted 300 reviews using Decision Tree: 215.44444444444446

predicted number of helpful_votes based on a user who has posted 300 reviews using Random Forest: 280.42916666666673

predicted number of helpful_votes based on a user who has posted 300 reviews using Neural Networks: 165.075371803955

In general, Neural Networks analysis is the best solution for it's complexity nature and it also processes more data than other analysis models. Therefore, Neural Networks is is best for this situation.
"""

# Linear Regression
regressor = LinearRegression()
regressor.fit(x, y)
new_num_reviews = np.array(10)
LR_predicted_value = regressor.predict(new_num_reviews)
print(f'predicted number of helpful_votes based on a user who has posted 10 reviews using linear regression: {LR_predicted_value[0]}')
print()

# Nearest neighbor
# Given that k = 15.
k = 15
new_num_reviews = np.array(10).reshape(-1, 1)
knn_regressor = KNeighborsRegressor(n_neighbors=k)
knn_regressor.fit(x, y)
print(f'predicted number of helpful_votes based on a user who has posted 10 reviews using Nearest neighbor: {knn_regressor.predict(new_num_reviews)[0]}')
print()

# Decision Tree
# Given that max_depth is 3.
dt_regressor = DecisionTreeRegressor(max_depth = 3)
new_num_reviews = np.array(10).reshape(-1, 1)
dt_regressor.fit(x, y)
print(f'predicted number of helpful_votes based on a user who has posted 10 reviews using Decision Tree: {dt_regressor.predict(new_num_reviews)[0]}')
print()

# Random Forest
rf_regressor = RandomForestRegressor()
new_num_reviews = np.array(10).reshape(-1, 1)
rf_regressor.fit(x, y)
print(f'predicted number of helpful_votes based on a user who has posted 10 reviews using Random Forest: {rf_regressor.predict(new_num_reviews)[0]}')
print()

# Neural Networks
# I got a warning about iterations, so that's why I have added the max_iter = 1000.
nn_regressor = MLPRegressor(max_iter=1000)
new_num_reviews = np.array(10).reshape(-1, 1)
nn_regressor.fit(x, y)
print(f'predicted number of helpful_votes based on a user who has posted 10 reviews using Neural Networks: {nn_regressor.predict(new_num_reviews)[0]}')

"""predicted number of helpful_votes based on a user who has posted 10 reviews using linear regression: 12.24571099268508

predicted number of helpful_votes based on a user who has posted 10 reviews using Nearest neighbor: 7.2

predicted number of helpful_votes based on a user who has posted 10 reviews using Decision Tree: 7.815028901734104

predicted number of helpful_votes based on a user who has posted 10 reviews using Random Forest: 6.384056389688743

predicted number of helpful_votes based on a user who has posted 10 reviews using Neural Networks: 10.674104661555067


In general, Neural Networks analysis is the best solution for it's complexity nature and it also processes more data than other analysis models. Therefore, Neural Networks is is best for this situation.

For higher data, Linear regression gave lowest estimation value compared to other analysis models. But when it comes to lower data, Linear regression gave highest estimation value when compared to other analysis models.
"""
# Create a 75%/25% train-test split of the data. Train the models then test them using the test data.
trainingX, testX, trainingY, testY = train_test_split(x, y, random_state = 1)

# Linear regression
regressor = LinearRegression()
regressor.fit(trainingX, trainingY)
predicted = regressor.predict(testX)
prediction_error = abs(predicted - testY)
print('Error prediction score for Linear Regression ')
print(np.mean(prediction_error))
print()

# Nearest Neighbor
knn_regressor = KNeighborsRegressor(n_neighbors=15)
knn_regressor.fit(trainingX, trainingY)
predicted = knn_regressor.predict(testX)
prediction_error = abs(predicted - testY)
print('Error prediction score for Nearest Neighbor')
print(np.mean(prediction_error))
print()

# Decision Tree
dt_regressor = DecisionTreeRegressor(max_depth = 3)
dt_regressor.fit(trainingX, trainingY)
predicted = dt_regressor.predict(testX)
prediction_error = abs(predicted - testY)
print('Error prediction score for Decision Tree')
print(np.mean(prediction_error))
print()

# Neural Networks
nn_regressor = MLPRegressor(max_iter=1000)
nn_regressor.fit(trainingX, trainingY)
predicted = nn_regressor.predict(testX)
prediction_error = abs(predicted - testY)
print('Error prediction score for Neural Networks')
print(np.mean(prediction_error))
print()

"""Of all the models, we could see that the Neural Networks have given lowest possible error prediction score. That means, probablity of getting an error in the predicted score is lesser for Neural Network analysis compared to all other analysis.

Therefore, we can conclude that the Neural Network Analysis is best solution for this data set.
"""