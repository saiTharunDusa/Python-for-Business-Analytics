# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
import scipy.stats
from statsmodels.stats.power import TTestIndPower
import matplotlib.pyplot as plt


print('H0: emailing discount codes for online orders will have no effect')
print('H1: emailing discount codes for online orders increases the number of web-based purchases ')
print()

#Conduct a power analysis to determine the minimum sample size.
print('Power analysis to determine minimum sample size for each group:')
analysis = TTestIndPower()
alpha = .05 #.05 is the typical alpha value
power  = .8 # .80 is the typical power value.
effect = .8 #.5 represents a medium effect size
observations = analysis.solve_power(effect_size= effect, power = power,
                                    alpha = alpha)
print(f'The minimum sample size for each group is {observations}.')
print()

# control group.
web_purchase_A_df = pd.read_csv('/content/web_purchase_A.csv')


print('The descriptive statistics of web_purchase_A_df : ')
print(web_purchase_A_df.describe())
print(web_purchase_A_df.head())
print()

"""1. The total no of web purchases in this data are 1121.
2. The mean and median are almost similar which indicates that the data set is well-centered.
3. On an average, there were 5 number of web purchases.
4. The maximum number of web purchases are 15.
"""

# treatment group.
web_purchase_B_df = pd.read_csv('/content/web_purchase_B.csv')
print('The descriptive statistics of web_purchase_B_df : ')
print(web_purchase_B_df.describe())
print(web_purchase_B_df.head())
print()

"""1. The mean and median of the data set are almost similar but not as much similar as web_purchase_A_df. So this data set is less well centered than the web_purchase_A_df data set.
2. The total no of web purchases are 1119.
3. On an average, there were 6 number of web purchases.
4. The maximum number of web purchases are 14.
"""

#Generate boxplots to visually comparte the two groups.
fig1, ax1 = plt.subplots()
ax1.boxplot([web_purchase_A_df['NumWebPurchases'], web_purchase_B_df['NumWebPurchases']])
ax1.set_xticklabels(['web_purchase_A', 'web_purchase_B'])
plt.show()
print()

"""1. The median for web_purchase_A is centered which tells us the data is more symmetrically distributed where as it is not the case for the web_purchase_B."""

#Conduct t-test to test the difference between groups
print('T-Test Results:')
print(scipy.stats.ttest_ind(web_purchase_A_df['NumWebPurchases'],
                            web_purchase_B_df['NumWebPurchases']))
print()

"""1. Since the p-value is 0.04 which is less than 0.05, hence we reject the null hypothesis and conclude that the emailing discount codes for online orders increases the number of web-based purchases"""

print('1. Since the p-value is 0.04 which is less than 0.05, hence we reject the null hypothesis \n and conclude that the emailing discount codes for online orders increases the number of web-based purchases ')

# effect size is calculated as (mean_diff) / np.std(web_purchase_A_df['NumWebPurchases'] + np.std(web_purchase_B_df['NumWebPurchases']))
mean_A = np.mean(web_purchase_A_df['NumWebPurchases'])
mean_B = np.mean(web_purchase_B_df['NumWebPurchases'])
mean_diff = mean_B - mean_A
std = np.std(web_purchase_A_df['NumWebPurchases'] + web_purchase_B_df['NumWebPurchases'])
effect_size = mean_diff / std
print(f'The effect size is {effect_size}')

"""We say, if the effect size is > .2 - indicate small effect.
        if the effect size is > .5 - indicate medium effect.
        if the effect size is > .8 - indicate large effect.

The effect size is very small which is 0.06 which tells that there is insginificant difference between web_purchase_A_df and web_purchase_B_df.
"""