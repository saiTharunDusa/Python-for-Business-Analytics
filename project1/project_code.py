
# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf

df = pd.read_csv('/content/dc_bike_share.csv')
print(df.describe())

"""**Season:**
1. The data covers four seasons (1 to 4), with an average season value of approximately 2.5.
2. The standard deviation is around 1.11, indicating a moderate amount of variation.
3. Seasons are evenly distributed, as the mean is close to the midpoint (2.5).

**Casual, Registered, and Total Count:**
1. Casual, registered, and total bike counts (casual, registered, and count) have right-skewed distributions.
2. The mean count is 189.46, with a standard deviation of approximately 181.39.
3. The minimum count is 1, and the maximum count is 977.

**Holiday:**
1. The holiday variable is binary (0 or 1), indicating whether it is a holiday or not.
2. The dataset has a low average holiday occurrence (approximately 2.88%).

**Weekday:**
Days of the week are represented numerically (0 to 6), with a mean of approximately 3.
The distribution of weekdays seems fairly uniform.

**Workingday:**
A binary variable (0 or 1) indicating whether it is a working day or not.
The average suggests that around 68.27% of the instances are working days.

**Temperature (temp):**
Temperature values range from 0.02 to 1, with an average of 0.5.
The temperature distribution seems well-spread.

**Humidity (hum):**
Humidity values range from 0 to 1, with an average of 0.63.
The humidity distribution appears to be moderate.

**Windspeed:**

Windspeed values range from 0 to 0.85, with an average of 0.19.
There is a moderate variation in windspeed.
"""

# Create a histogram to better understand the distribution of no of registered bike users.
plt.hist(df['registered'], bins = 10)
plt.title('Distribution of registered bike users')
plt.xlabel('No of registered bike users')
plt.ylabel('Records')
plt.show()

"""From the above histogram, we can conclude that the no of registered bike users are decreasing steadily."""

# Create a bar plot that shows the median number of registered riders (grouped by month) for each month for the year 2011.
# Create another bar plot that shows the median number of registered riders (grouped by month) for each month for the year 2012.

df['dteday'] = pd.to_datetime(df['dteday'])
df['year'] = df['dteday'].dt.year
df['month'] = df['dteday'].dt.month

df_year_2011 = df[df['year'] == 2011]
df_year_2012 = df[df['year'] == 2012]

median_2011 = df_year_2011.groupby('month')['registered'].median()
median_2012 = df_year_2012.groupby('month')['registered'].median()

plt.bar(median_2011.index, median_2011.values)
plt.title('Median of registered users for each month in the year 2011.')
plt.xlabel('Month')
plt.ylabel('Median of no of registered users.')
plt.show()

plt.bar(median_2012.index, median_2012.values)
plt.title('Median of registered users for each month in the year 2012.')
plt.xlabel('Month')
plt.ylabel('Median of no of registered users.')
plt.show()

"""1.In the year 2011, in the 6th month the median is high which is around 130. That implies there are more no of registered bike users are in the 6th month. Whereaas in the year 2012, 9th month has more no of registered bike users.

2.In both years, the no of registered bike users are less in the first month.

3.In the year 2012 has more no of registered bike users compared to the year 2011 since the highest median of 2012 is higher than the highest median of 2011.
"""

# Create a bar plot showing the median number of registered riders (grouped by hour) for each hour for the month of July (include both years).
df_year_2011_2012 = df[(df['year'] == 2011) | (df['year'] == 2012)]
df_month_july = df_year_2011_2012[df_year_2011_2012['month'] == 7]
median_july = df_month_july.groupby('hr')['registered'].median()
plt.bar(median_july.index, median_july.values)
plt.title('Median no of registered riders grouped by each hour in the month of july of the years 2011 and 2012.')
plt.xlabel('Hours')
plt.ylabel('Median of no of registered bike users.')
plt.show()

"""1. In the month of july of both year 2011 and 2012, the 16th &17th hour has more no of registered bike users.
2.At the 3rd and 4th hour there are least no of registered bike users.
"""

# Create a bar plot showing the median number of registered riders (grouped by day) for each day (include both years)
# we have date frame which includes the both years 2011 and 2012.
df_year_2011_2012['day'] = df_year_2011_2012['dteday'].dt.day
median_day = df_year_2011_2012.groupby('day')['registered'].median()

plt.bar(median_day.index, median_day.values)
plt.xlabel('Days')
plt.ylabel('Median of registered bike users.')
plt.title('Median no of registered rideres grouped by day for each day in the year 2011 and 2012')
plt.show()

"""1.On the 17th day, no of registered bike users are more. And it was on day 21 where the no of registered bike users are least.
2.Almost every day has almost similar no of registered bike users.
"""

# Create a scatter plot to show the relationship between windspeed and the number of registered riders only for the month of March in the year 2011.
# We already have data frame for the year 2011.
df_march_2011 = df_year_2011[df_year_2011['month'] == 3]
plt.scatter(df_march_2011['windspeed'], df_march_2011['registered'])
plt.title('Relationship between windspeed and no of registered riders for the month of march in the year 2011.')
plt.xlabel('Windspeed')
plt.ylabel('Registered Bike Users')
plt.show()

"""1. As windspeed increases, the no of registered bike users decreases.
2. The more no of registered bike users are at the windspeed 0.3

"""

# Define the linear regression model
model_formula = "registered ~ season + holiday + weekday + windspeed"
model = smf.ols(formula=model_formula, data=df).fit()

# Print the regression summary
print(model.summary())

# Extract coefficients and intercept from the model
intercept = model.params[0]
season_coefficient = model.params[1]
holiday_coefficient = model.params[2]
weekday_coefficient = model.params[3]
windspeed_coefficient = model.params[4]

# Print coefficients and intercept
print("Intercept:", intercept)
print("Season Coefficient:", season_coefficient)
print("Holiday Coefficient:", holiday_coefficient)
print("Weekday Coefficient:", weekday_coefficient)
print("Windspeed Coefficient:", windspeed_coefficient)

# Print all coefficients
print()
print("All Coefficients:")
print(model.params)

# Select some random data to predict registered riders
random_data = df.tail(1)  # Use the last row as an example

# Extract predictor values from the random data
season_x = random_data['season'].values[0]
holiday_x = random_data['holiday'].values[0]
weekday_x = random_data['weekday'].values[0]
windspeed_x = random_data['windspeed'].values[0]

# Calculate the predicted number of registered riders
predicted_registered_riders = (
    season_coefficient * season_x +
    holiday_coefficient * holiday_x +
    weekday_coefficient * weekday_x +
    windspeed_coefficient * windspeed_x
) + intercept

# Print the predicted number of registered riders
print('The predicted number of registered users:', predicted_registered_riders)

"""**Model Significance:**
The overall model has statistical significance, as indicated by the F-statistic (203.5) and its associated p-value (7.31e-171). This suggests that at least one of the predictors is related to the dependent variable.

**R-squared Value:**
The R-squared value is 0.045, indicating that the model explains approximately 4.5% of the variance in the registered users' count. While this is a relatively low percentage, it suggests that the selected predictors contribute somewhat to the variability in registered users.

**Individual Coefficients:**
The coefficients for each predictor provide information about the strength and direction of their relationship with the registered users. For instance:
Season has a positive coefficient (26.04), implying that as the season variable increases, the number of registered users tends to increase.
Holiday has a negative coefficient (-40.12), suggesting a decrease in registered users on holidays compared to non-holidays.
Weekday has a positive coefficient (1.22), indicating a slight increase in registered users on weekdays.
Windspeed has a relatively large positive coefficient (137.12), suggesting a substantial impact on the registered users' count with increasing windspeed.

**Intercept Interpretation:**
The intercept (60.05) represents the estimated number of registered users when all predictors are zero. In this context, it might not have a practical interpretation since some predictors, like season and windspeed, cannot be zero.

**Predicted Count:**
The predicted number of registered users for a specific set of predictor values (season, holiday, weekday, windspeed) is approximately 105.73. This value provides an estimate based on the linear regression model, taking into account the coefficients and predictor values.
"""

